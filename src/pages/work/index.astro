---
import { getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import { WORK } from "@consts";
import DateRange from "@components/DateRange.vue";

const collection = (await getCollection("work"))
  .sort((a, b) => {
    const dateAStart = new Date(a.data.dateStart);
    const dateBStart = new Date(b.data.dateStart);

    // Primary sort: dateStart descending
    if (dateBStart.valueOf() !== dateAStart.valueOf()) {
      return dateBStart.valueOf() - dateAStart.valueOf();
    }

    // Secondary sort: current jobs (dateEnd is not a Date object) first
    const aIsCurrent = !(a.data.dateEnd instanceof Date);
    const bIsCurrent = !(b.data.dateEnd instanceof Date);

    if (aIsCurrent && !bIsCurrent) { // a is current, b is not
      return -1;
    }
    if (!aIsCurrent && bIsCurrent) { // b is current, a is not
      return 1;
    }

    // Tertiary sort (if both have actual end dates): dateEnd descending
    if (!aIsCurrent && !bIsCurrent) { // Both have actual end dates
      // At this point, a.data.dateEnd and b.data.dateEnd are Date objects
      const dateAEnd = a.data.dateEnd as Date;
      const dateBEnd = b.data.dateEnd as Date;
      return dateBEnd.valueOf() - dateAEnd.valueOf(); // Descending end dates
    }

    // If both are current (e.g., dateEnd is "current" or undefined for both),
    // their relative order based on startDate is maintained (or could add another tie-breaker).
    return 0;
  });

const work = await Promise.all(
  collection.map(async (item) => {
    const { Content } = await item.render();
    return { ...item, Content };
  })
);
---

<PageLayout title={WORK.TITLE} description={WORK.DESCRIPTION}>
  <Container>
    <div class="space-y-10">
      <div class="animate font-semibold text-black dark:text-white">
        Work
      </div>
      <ul class="flex flex-col space-y-4">
        {
          work.map(entry => (
            <li class="animate">
              <div class="text-sm opacity-75">
                <DateRange client:load startDate={entry.data.dateStart} endDate={entry.data.dateEnd} />
              </div>
              <div class="font-semibold text-black dark:text-white">
                {entry.data.company}
              </div>
              <div class="text-sm opacity-75">
                {entry.data.role}
              </div>
              <article>
                <entry.Content />
              </article>
            </li>
          ))
        }
      </ul>
    </div>
  </Container>
</PageLayout>
